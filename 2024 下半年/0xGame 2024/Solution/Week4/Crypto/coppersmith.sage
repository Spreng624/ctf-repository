from Crypto.Util.number import *

N = 135500646574582511239845764710311769260801998982429500680171919823431178899526463566215834234383331374445093363969218810906991784569340270510936759183504496584225937614940086329775325893307453919055830270986601152002191368431527285285313669979358099782497422114870417519470053198217401297960844455029559146309
e = 65537
c = 41763956818640145556632229720626372656921875856507389014855753965024986594502113237270745517422792354256348958542864591249410500750410658988509136242435502259172258432676502846729088278202750721760451160668653746019965695721844819587671602925551448624324524027931677927410810126647175483982178300855471710099
h = 918578024558168836638919636090777586135497638818209533615420650282292168631485

t = 248
h = h << 253
for i in range(2**(253-t)):
    PR.<x> = PolynomialRing(Zmod(N), implementation='NTL')
    f = h + (i<<t) + x
    try:
        x0 = f.small_roots(X = 2**t, beta = 0.49, epsilon=0.01)[0]
#         x0 = 12757858752378535708139819660175106458980802485374460654460439738856801589
        p = h + (i << t) + x0
        if N % p != 0:
            continue
        q = N // p
        print(f"i = {i}")
        print(f"x0 = {x0}")
        print(f"p = {p}")
        d = inverse(e, (p - 1) * (q - 1))
        m = pow(c, d, N)
        print(long_to_bytes(int(m)))  # 0xGame{8f4c17cb-442a-49bd-830a-d16af225a5c5}
        break
    except:
        print(i, end='\r')