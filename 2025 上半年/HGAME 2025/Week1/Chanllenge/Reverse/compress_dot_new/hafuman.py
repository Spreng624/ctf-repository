huffman_tree = {
    "a": {
        "a": {
            "a": {
                "a": {"a": {"s": 125}, "b": {"a": {"s": 119}, "b": {"s": 123}}},
                "b": {"a": {"s": 104}, "b": {"s": 105}},
            },
            "b": {"a": {"s": 101}, "b": {"s": 103}},
        },
        "b": {
            "a": {"a": {"a": {"s": 10}, "b": {"s": 13}}, "b": {"s": 32}},
            "b": {"a": {"s": 115}, "b": {"s": 116}},
        },
    },
    "b": {
        "a": {
            "a": {
                "a": {
                    "a": {"a": {"s": 46}, "b": {"s": 48}},
                    "b": {
                        "a": {"a": {"s": 76}, "b": {"s": 78}},
                        "b": {"a": {"s": 83}, "b": {"a": {"s": 68}, "b": {"s": 69}}},
                    },
                },
                "b": {
                    "a": {"a": {"s": 44}, "b": {"a": {"s": 33}, "b": {"s": 38}}},
                    "b": {"s": 45},
                },
            },
            "b": {
                "a": {"a": {"s": 100}, "b": {"a": {"s": 98}, "b": {"s": 99}}},
                "b": {"a": {"a": {"s": 49}, "b": {"s": 51}}, "b": {"s": 97}},
            },
        },
        "b": {
            "a": {
                "a": {"a": {"s": 117}, "b": {"s": 118}},
                "b": {"a": {"a": {"s": 112}, "b": {"s": 113}}, "b": {"s": 114}},
            },
            "b": {
                "a": {"a": {"s": 108}, "b": {"s": 109}},
                "b": {"a": {"s": 110}, "b": {"s": 111}},
            },
        },
    },
}


def huffman_decode(encoded_data, huffman_tree):
    decoded_string = ""
    current_node = huffman_tree

    for bit in encoded_data:
        if bit == "0":
            current_node = current_node["a"]
        else:
            current_node = current_node["b"]

        try:
            current_node["s"]
            decoded_string += chr(current_node["s"])
            current_node = huffman_tree  # 重置到根节点
        except:
            pass

    return decoded_string


encoded_data
m = huffman_decode(encoded_data, huffman_tree)
print(m)
