#!/usr/bin/python3
# @Time    : 2020-06-26 13:53：47
# @Author  : badmonkey
# @FileName: exp.py
# @Software: PyCharm

from hashlib import md5

a = [
    132512289947606266688,
    2414795396463926269118,
    4431032273286306311038,
    438329060232570923534,
    3281842379559820847930,
    3692926635897108774236,
    2321233718723287079203,
    2906518304492591303432,
    16329871656862994748,
    955443290786656773324,
    3899236180323276022119,
    3007518555157518129362,
    199825369329115989579,
    1892203519839647552731,
    1663367093510654645615,
    2818239607219638890476,
    1609653993011886150031,
    876177649679238314392,
    64638488345439455658,
    702091777537314818127,
    2924135376313926286260,
    1513945888509335587618,
    945145651183067313209,
    3980711473391297194399,
    532587388734221515102,
    850082115913851677926,
    1341869583757324217413,
    3907913016252282691693,
    1659084558674822543062,
    3146932273421315888497,
    447678727192767667534,
    3073661656530784633718,
    1412209678918380868590,
    3768627013375110863559,
    4260476107811246443867,
    569430811137646528556,
    534304982838037693229,
    171539063676303632233,
    876380098043872683778,
    1379079964748964855735,
    4502263359279147194141,
    3871467895851428124873,
    1873245705839170731546,
    3278014252760893322853,
    2417284838875457207038,
    3909477741902431070824,
    2987652175894271732201,
    1848743268276145862519,
    2724985743527003977076,
    2070852918438712853532,
    1285272495716088648507,
    2674287484603241609950,
    4138133212901657663775,
    710058052066041315713,
    2777863325085117868077,
    2010235832999174953954,
    4570873502224619249353,
    2819009959943938633903,
    1517003993374574562683,
    805800309809619272650,
    459286691389244854557,
    4179050550215838827249,
    1255285121486530023485,
    1118525043806432513453,
    3859455943156125426205,
    89289626203320452817,
    4643684829186959131820,
    226322390044812305284,
    3059305091059169430907,
    2121289926471736948693,
    1932197436132021987593,
    350197708619902358746,
    3922342070491939933106,
    4245282549916363769747,
    2706993416933981315294,
    4387316124919887443598,
    1166190476683313167410,
    4647377080883871673239,
    2417285158341492119434,
    3496941124891656512050,
]

s = 30611285231583357754266

M = [
    2826962231,
    3385780583,
    3492076631,
    3387360133,
    2955228863,
    2289302839,
    2243420737,
    4129435549,
    4249730059,
    3553886213,
    3506411549,
    3658342997,
    3701237861,
    4279828309,
    2791229339,
    4234587439,
    3870221273,
    2989000187,
    2638446521,
    3589355327,
    3480013811,
    3581260537,
    2347978027,
    3160283047,
    2416622491,
    2349924443,
    3505689469,
    2641360481,
    3832581799,
    2977968451,
    4014818999,
    3989322037,
    4129732829,
    2339590901,
    2342044303,
    3001936603,
    2280479471,
    3957883273,
    3883572877,
    3337404269,
    2665725899,
    3705443933,
    2588458577,
    4003429009,
    2251498177,
    2781146657,
    2654566039,
    2426941147,
    2266273523,
    3210546259,
    4225393481,
    2304357101,
    2707182253,
    2552285221,
    2337482071,
    3096745679,
    2391352387,
    2437693507,
    3004289807,
    3857153537,
    3278380013,
    3953239151,
    3486836107,
    4053147071,
]
S = 123342809734


# 解决子背包问题
def findC(a, c):
    for i in range(32):
        for j in range(i + 1, 32):
            for k in range(j + 1, 32):
                for m in range(k + 1, 32):
                    for n in range(m + 1, 32):
                        for o in range(n + 1, 32):
                            if a[i] + a[j] + a[k] + a[m] + a[n] + a[o] == c:
                                tmp = (i, j, k, m, n, o)
                                print(tmp)
                                return tmp
    return 0


# 收集所有可能解
def collectValue(a):
    res = []
    for i in range(32):
        for j in range(i + 1, 32):
            for k in range(j + 1, 32):
                for m in range(k + 1, 32):
                    for n in range(m + 1, 32):
                        for o in range(n + 1, 32):
                            if a[i] + a[j] + a[k] + a[m] + a[n] + a[o] < s:
                                tmp = (
                                    i,
                                    j,
                                    k,
                                    m,
                                    n,
                                    o,
                                    a[i] + a[j] + a[k] + a[m] + a[n] + a[o],
                                )
                                res.append(tmp[-1])
    return res


def findSolution(a, c):
    La = collectValue(a[:32])
    La.sort()
    print("Left Part done possible numbers %d" % len(La))
    Lb = collectValue(a[32:])
    Lb.sort()
    print("Right part done possible numbers %d" % len(Lb))
    i = 0
    j = len(Lb) - 1
    while i < len(La) and j >= 0:
        tot = La[i] + Lb[j]
        if tot < c:
            i += 1
        elif tot > c:
            j -= 1
        else:
            tmp = (La[i], Lb[j])
            print("Left subset sum is %d " % La[i])
            print("Right subset sum is %d " % Lb[j])
            return tmp
    print("no solution return (0,0)")
    return (0, 0)


solution = findSolution(a, s)
print(solution)


L = findC(a[:32], solution[0])
R = findC(a[32:], solution[1])


def connect(L, R):
    res = ["0"] * 64
    for i in L:
        res[i] = "1"
    for i in R:
        res[i + 32] = "1"
    return res


m = connect(L, R)

message = "".join(m)
# message = '00000000001001000000001001000100000000010001000100000001000000000000000000000111'

flag = md5(message.encode()).hexdigest()
print(flag)
# fb3a16cf748160f232b839b32a8eb029
