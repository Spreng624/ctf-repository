.MODEL SMALL
.STACK 100H
.DATA
    WELCOME_MSG db 'Welcome to GHCTF!', 0DH, 0AH, '$'
    INPUT_MSG db 'Input your flag:', '$'

    WRONG_MSG db 0DH, 0AH, 'Wrong!', 0DH, 0AH, '$'
    RIGHT_MSG db 0DH, 0AH, 'Right!', 0DH, 0AH, '$'
    
    DATA1 DB 26H,27H,24H,25H,2AH,2BH,28H,00H
            DB 2EH,2FH,2CH,2DH,32H,33H,30H,00H
            DB 36H,37H,34H,35H,3AH,3BH,38H,39H
            DB 3EH,3FH,3CH,3DH,3FH,27H,34H,11H
    
    DATA2 DB 69H,77H,77H,66H,73H,72H,4FH,46H
            DB 03H,47H,6FH,79H,07H,41H,13H,47H
            DB 5EH,67H,5FH,09H,0FH,58H,63H,7DH
            DB 5FH,77H,68H,35H,62H,0DH,0DH,50H
    
    BUFFER1 db 33 dup(0)
    BUFFER2 db 33 dup(0)
.CODE

START:
    MOV AX,@DATA
    MOV DS,AX
    MOV AH,09H
    MOV DX,OFFSET WELCOME_MSG
    INT 21H
    MOV DX,OFFSET INPUT_MSG
    INT 21H
    MOV AH,0AH
    MOV DX,OFFSET BUFFER1
    MOV BYTE PTR[BUFFER1],33
    INT 21H
    CALL DO1
    CALL ENC
    MOV SI,OFFSET BUFFER1 + 2
    MOV DI,OFFSET DATA2
    MOV CX,32
LOOP1:
    MOV AL,[SI]
    CMP AL,[DI]
    JNE P2
    INC SI
    INC DI
    LOOP LOOP1
P1:
    MOV AH,09H
    LEA DX,RIGHT_MSG
    INT 21H
    JMP EXIT_PROGRAM
P2:
    MOV AH,09H
    LEA DX,WRONG_MSG
    INT 21H

EXIT_PROGRAM:  
    MOV AX,4C00H
    INT 21H

DO1 PROC
    PUSH SI
    PUSH DI
    PUSH CX
    XOR SI,SI
    MOV CX,8
SWAP_LOOP:
    PUSH CX
    MOV DI,SI
    ADD DI,4
    CMP DI,28
    JL NOWRAP
    SUB DI,28
NOWRAP:
    MOV BX,SI
    CALL DO2
    ADD SI,4
    POP CX
    LOOP SWAP_LOOP
    POP CX
    POP DI
    POP SI
    RET
DO1 ENDP

DO2 PROC
    PUSH CX
    MOV CX,4
LOOP3:
    MOV AL,DATA1[BX]
    MOV AH,DATA1[DI]
    MOV DATA1[BX],AH
    MOV DATA1[DI],AL
    INC BX
    INC DI
    LOOP LOOP3
    POP CX
    RET
DO2 ENDP

ENC PROC
    PUSH CX
    MOV SI,OFFSET BUFFER1 + 2
    MOV DI,OFFSET DATA1
    MOV CX,8
LOOP2:
    MOV AX,WORD PTR[DI + 1]
    XOR WORD PTR[SI],AX
    MOV AX,WORD PTR[DI + 2]
    XOR WORD PTR[SI + 2],AX
    ADD SI,4
    ADD DI,4
    LOOP LOOP2
    POP CX
    RET
ENC ENDP

END START